#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include "read.h"

#define LENGTH 10000

int main(int argc, char *argv[])
{
	const char *input_file = "a.txt", *output_file = "b.txt";
	int result;
	char str[LENGTH];
	double counter_of_time;
	
	if (argc != 1)
	{
		printf("Usage: %s filename\n", argv[0]);
		return 0;
	}
	
	printf("Input string: ");
	if (!fgets(str, LENGTH, stdin))
	{
		printf("Cannot read str!\n");
		return 1;
	}
	
	counter_of_time = clock();
	result = solve(input_file, output_file, str);
	counter_of_time = (clock() - counter_of_time) / CLOCKS_PER_SEC;

	if (result < 0)
	{
		switch (result)
		{
			case (-11):
			{
				printf("Cannot open %s!\n", input_file);
				break;
			}
			case (-12):
			{
				printf("Cannot open %s!\n", output_file);
				break;
			}
			case (-2):
			{
				printf("Cannot read %s!\n", input_file);
				break;
			}
			default:
			{
				printf("Unknown Error %d in %s!\n", result, input_file);
				break;
			}
		}
		return 1;
	}
	printf("%d strings were written\n", result);
	printf("Elapsed = %.2lf\n", counter_of_time);
	
	return 0;
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "read.h"

#define MAX_PRINTABLE_NUMBER 15
#define MAX_LENGTH 10000

int make_string(char *str)
{
	int idx;
	for (idx = 0; str[idx]; idx++)
	{
		if (str[idx] >= 'A' && str[idx] <= 'Z')
		{
			str[idx] = str[idx] - 'A' + 'a';
		}
		if (str[idx] == '\n')
		{
			str[idx] = 0;
			break;
		}
	}	
	return idx;
}

int solve(const char *input,
		  const char *output, 
		  char *str)
{
	FILE *fp1, *fp2;
	int idx = 0, id_ = 0,
		counter = 0;
		
	char buffer[MAX_LENGTH],
		 buffer2[MAX_LENGTH];
	
	if (!(fp1 = fopen(input, "r")))
	{
		return -11;
	}
	if (!(fp2 = fopen(output, "w"))) 
	{
		return -12;
	}
	
	make_string(str);
	
	while (fgets(buffer, MAX_LENGTH, fp1))
	{
		strcpy(buffer2, buffer);
		make_string(buffer);
		
		if (strstr(buffer, str))
		{
			counter++;
			fprintf(fp2, "%s", buffer2);
		}
	} 
	if (!feof(fp1))
	{
		fclose(fp1);
		fclose(fp2);
		return -2;
	}
	
	fclose(fp1);
	fclose(fp2);
	return counter;	
} 
